{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/entry.js","webpack:///./src/explosion.js","webpack:///./src/flare.js","webpack:///./src/game.js","webpack:///./src/meteor.js","webpack:///./src/shield.js","webpack:///./src/star.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAA0B;;AAE1B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,6CAAI;AAC5B;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACfD;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACe,wEAAS,EAAC;;;;;;;;;;;;;ACnBzB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;;AChCrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B;AACA;AACM;AACR;AACF;;AAE1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B;AAC3B,yBAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,6CAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;;AAEA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,+CAAM;AACtC;AACA;;AAEA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,6BAA6B;AAChD,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kDAAS;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kDAAS;AAC5C;AACA;AACA;;AAEA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,8CAAK;AAClC;AACA,UAAU,8CAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8CAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;;AAEA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,6BAA6B;AAChcAAc,+CAAM;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,EAAC;;;;;;;;;;;;;ACtgBpB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;AC/DtB;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,EAAC;;;;;;;;;;;;;ACrBtB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACe,mEAAI,EAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/entry.js\");\n","import Game from \"./game\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  var canvas = document.getElementById(\"myCanvas\");\n  var ctx = canvas.getContext(\"2d\");\n\n  var instructions = document.getElementById(\"game-instructions\");\n  var play = document.getElementById(\"play-button\");\n  play.addEventListener(\"click\", handleClick);\n\n  function handleClick(e) {\n    const newGame = new Game(canvas, ctx);\n    newGame.startGame();\n    instructions.classList.toggle(\"hidden\");\n  }\n});\n","class Explosion {\n  constructor(x, y, hue, light, ctx) {\n    this.ctx = ctx;\n    this.x = x;\n    this.y = y;\n    this.hue = hue;\n    this.light = light;\n    this.size = Math.floor(Math.random() * 1) + 1;\n    this.speed = Math.floor(Math.random() * 1) + 1;\n    this.angle = Math.floor(Math.random() * 360);\n    this.alpha = Math.random() * 0.3 + 0.7;\n  }\n\n  render() {\n    this.ctx.fillStyle =\n      \"hsla(\" + this.hue + \", 100%, \"+ this.light +\"%,\" + this.alpha + \")\";\n    this.ctx.fillRect(this.x, this.y, this.size, this.size);\n  }\n}\nexport default Explosion;\n","class Flare {\n  constructor(x, y, hue, ctx) {\n    this.x = x;\n    this.y = y;\n    this.hue = hue;\n    this.ctx = ctx;\n    this.radius = Math.random() * 5 + 10;\n  }\n\n  render() {\n    var newRadius = this.radius;\n    this.ctx.beginPath();\n    this.ctx.arc(\n      this.x + Math.random() * 2 - 1,\n      this.y + Math.random() * 2 - 1,\n      newRadius < 0 ? 0 : newRadius,\n      0,\n      Math.PI * 2,\n      false\n    );\n    this.ctx.fillStyle =\n      \"hsla(\" +\n      this.hue +\n      \", 100%, \" +\n      (Math.random() * 50 + 50) +\n      \"%, \" +\n      (Math.random() * 50 + 50) / 100 +\n      \")\";\n    this.ctx.fill();\n  }\n}\n\nexport default Flare;\n","import Meteor from \"./meteor\";\nimport Shield from \"./shield\";\nimport Explosion from \"./explosion\";\nimport Flare from \"./flare\";\nimport Star from \"./star\";\n\nclass Game {\n  constructor(canvas, ctx) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n\n    this.meteorArray = [];\n    this.numMeteors = 1;\n    this.speed = 1;\n    this.shieldArray = [];\n    this.flareArray = [];\n    this.starsArray = [];\n\n    this.tempStartPoint = { x: 0, y: 0 };\n    this.tempEndPoint = { x: 0, y: 0 };\n    this.tempLineLength = 0;\n\n    this.mousedown = false;\n    this.mouseX = this.canvas.width / 2;\n    this.mouseY = this.canvas.height / 2;\n\n    this.explosionArray = [];\n\n    this.power = {\n      max: 100,\n      current: 100,\n      rate: 0.5\n    };\n\n    this.health = 3;\n    this.score = 0;\n    this.counter = 5000;\n    this.gameOver = false;\n    this.gamePause = false;\n    this.fade = 0;\n\n    // this.earth = new Earth(this.canvas, this.ctx);\n    this.earth = new Image();\n    this.earth.src =\n      \"https://ui-ex.com/transparent600_/planet-transparent-5.png\";\n\n    this.handleGameOver = this.handleGameOver.bind(this);\n    this.createStars = this.createStars.bind(this);\n    this.createMeteors = this.createMeteors.bind(this);\n    this.loop = this.loop.bind(this);\n    this.handleMouseup = this.handleMouseup.bind(this);\n    this.handleMousedown = this.handleMousedown.bind(this);\n    this.handleMousemove = this.handleMousemove.bind(this);\n    this.increaseDifficulty = this.increaseDifficulty.bind(this);\n\n    canvas.addEventListener(\"mousedown\", this.handleMousedown, false);\n    canvas.addEventListener(\"mouseup\", this.handleMouseup, false);\n    canvas.addEventListener(\"mousemove\", this.handleMousemove, false);\n    document.addEventListener(\"keydown\", e => {\n      switch (e.code) {\n        case \"Space\":\n          e.preventDefault();\n          this.handleSpace();\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  //Line intersection math source: http://www.kevlindev.com/gui/math/intersection/Intersection.js\n  intersection(a1, a2, b1, b2) {\n    var result;\n    var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    var u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n    if (u_b != 0) {\n      var ua = ua_t / u_b;\n      var ub = ub_t / u_b;\n      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n        result = {\n          x: a1.x + ua * (a2.x - a1.x),\n          y: a1.y + ua * (a2.y - a1.y)\n        };\n      } else {\n        result = false;\n      }\n    } else {\n      result = false;\n    }\n    return result;\n  }\n\n  startGame() {\n    this.fade = 0;\n    this.createStars(20);\n    this.difficultyInterval = setInterval(this.increaseDifficulty, 3000);\n    this.meteorInterval = setInterval(this.createMeteors, 700);\n    this.gameLoop = setInterval(this.loop, 16);\n    this.starLoop = setInterval(() => this.createStars(5), 5000);\n  }\n\n  increaseDifficulty() {\n    if (this.speed < 4) {\n      this.speed += 0.05;\n    }\n    if (this.numMeteors < 7) {\n      this.numMeteors += 0.1;\n    }\n    if (this.power.rate < 0.75) {\n      this.power.rate += 0.03;\n    }\n  }\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  createStars(count) {\n    while (count >= 0) {\n      this.starsArray.push(\n        new Star(\n          Math.random() * this.canvas.width,\n          Math.random() * this.canvas.height,\n          Math.random() * 2,\n          0.2,\n          this.ctx\n        )\n      );\n      count--;\n    }\n  }\n\n  renderStars() {\n    for (var i = 0; i < this.starsArray.length; i++) {\n      this.starsArray[i].render();\n    }\n  }\n\n  updateStars() {\n    for (var i = 0; i < this.starsArray.length; i++) {\n      this.starsArray[i].update();\n      if (this.starsArray[i].y > this.canvas.height) {\n        this.starsArray.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  createMeteors() {\n    if (this.meteorArray.length < this.numMeteors) {\n      this.meteorArray.push(new Meteor(this.canvas, this.ctx, this.speed));\n    }\n  }\n\n  updateMeteors() {\n    for (var i = 0; i < this.meteorArray.length; i++) {\n      this.meteorArray[i].update();\n      this.meteorArray[i].render();\n    }\n  }\n\n  renderShields() {\n    for (var i = 0; i < this.shieldArray.length; i++) {\n      this.shieldArray[i].render();\n    }\n  }\n\n  updatePower() {\n    if (this.power.current < 0) {\n      this.power.current = 0;\n    }\n\n    if (this.power.current < this.power.max) {\n      this.power.current += this.power.rate;\n    }\n\n    if (this.power.current > this.power.max) {\n      this.power.current = this.power.max;\n    }\n\n    if (this.mousedown) {\n      var dx = this.mouseX - this.tempStartPoint.x;\n      var dy = this.mouseY - this.tempStartPoint.y;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance <= this.power.current) {\n        this.tempEndPoint = { x: this.mouseX, y: this.mouseY };\n        this.tempLineLength = distance;\n      } else {\n        var angle = Math.atan2(dy, dx);\n        this.tempEndPoint = {\n          x: this.tempStartPoint.x + Math.cos(angle) * this.power.current,\n          y: this.tempStartPoint.y + Math.sin(angle) * this.power.current\n        };\n\n        var dx2 = this.tempEndPoint.x - this.tempStartPoint.x;\n        var dy2 = this.tempEndPoint.y - this.tempStartPoint.y;\n\n        this.tempLineLength = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n      }\n    }\n  }\n\n  renderGuide() {\n    if (this.mousedown) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(this.tempStartPoint.x, this.tempStartPoint.y);\n      this.ctx.lineTo(this.mouseX, this.mouseY);\n      this.ctx.strokeStyle = \"#606060\";\n      this.ctx.stroke();\n\n      this.ctx.beginPath();\n      this.ctx.moveTo(this.tempStartPoint.x, this.tempStartPoint.y);\n      this.ctx.lineTo(this.tempEndPoint.x, this.tempEndPoint.y);\n      this.ctx.strokeStyle = \"#fff\";\n      this.ctx.stroke();\n    }\n  }\n\n  updateShields() {\n    for (var i = 0; i < this.shieldArray.length; i++) {\n      for (var k = 0; k < this.meteorArray.length; k++) {\n        var shield = this.shieldArray[i];\n        var meteor = this.meteorArray[k];\n        var intersection = this.intersection(\n          shield.startPoint,\n          shield.endPoint,\n          meteor.startPoint,\n          meteor.endPoint\n        );\n        if (intersection) {\n          this.score += 100;\n          this.score += 100 - Math.floor(shield.length);\n          if (this.score / this.counter > 1) {\n            this.health += 1;\n            this.counter += 5000;\n          }\n          this.shieldArray.splice(i, 1);\n          this.createCluseterExplosion(\n            intersection.x,\n            intersection.y,\n            100,\n            100,\n            20\n          );\n          this.createLineExplosion(\n            shield.startPoint.x,\n            shield.startPoint.y,\n            shield.angle,\n            100,\n            100,\n            shield.length,\n            20\n          );\n\n          this.createLineExplosion(\n            meteor.startPoint.x,\n            meteor.startPoint.y,\n            meteor.angle,\n            0,\n            50,\n            meteor.length,\n            20\n          );\n\n          this.createFlares(intersection.x, intersection.y, 120);\n          this.meteorArray.splice(k, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  createLineExplosion(x, y, angle, hue, light, length, count) {\n    while (count > 0) {\n      var newLength = Math.random() * length;\n      var newX = x - Math.cos(angle) * newLength;\n      var newY = y - Math.sin(angle) * newLength;\n      this.explosionArray.push(new Explosion(newX, newY, hue, light, this.ctx));\n      count--;\n    }\n  }\n\n  createCluseterExplosion(x, y, hue, light, count) {\n    while (count > 0) {\n      var newRadius = Math.random() * 2;\n      var newAngle = Math.random() * Math.PI * 2;\n      var newX = x + Math.cos(newAngle) * newRadius;\n      var newY = y + Math.sin(newAngle) * newRadius;\n      this.explosionArray.push(new Explosion(newX, newY, hue, light, this.ctx));\n      count--;\n    }\n  }\n\n  updateExplosions() {\n    for (var i = 0; i < this.explosionArray.length; i++) {\n      var explosion = this.explosionArray[i];\n      var radians = explosion.angle * (Math.PI / 180);\n      var dx = Math.cos(radians) * (explosion.speed * explosion.alpha);\n      var dy = Math.sin(radians) * (explosion.speed * explosion.alpha);\n\n      explosion.x += dx;\n      explosion.y += dy;\n\n      explosion.alpha -= 0.02;\n\n      if (explosion.alpha <= 0) {\n        this.explosionArray.splice(i, 1);\n      }\n    }\n  }\n\n  renderExplosions() {\n    for (var i = 0; i < this.explosionArray.length; i++) {\n      var explosion = this.explosionArray[i];\n      explosion.render();\n    }\n  }\n\n  createFlares(x, y, hue) {\n    this.flareArray.push(new Flare(x, y, hue, this.ctx));\n    this.flareArray.push(\n      new Flare(\n        x + (Math.random() * 10 - 5),\n        y + (Math.random() * 10 - 5),\n        hue,\n        this.ctx\n      )\n    );\n    this.flareArray.push(\n      new Flare(\n        x + (Math.random() * 10 - 5),\n        y + (Math.random() * 10 - 5),\n        hue,\n        this.ctx\n      )\n    );\n  }\n\n  renderFlares() {\n    for (var i = 0; i < this.flareArray.length; i++) {\n      this.flareArray[i].render();\n    }\n  }\n\n  updateFlares() {\n    for (var i = 0; i < this.flareArray.length; i++) {\n      var flare = this.flareArray[i];\n      flare.radius -= 0.7;\n      if (flare.radius <= 0) {\n        this.flareArray.splice(i, 1);\n      }\n    }\n  }\n\n  renderEarth() {\n    this.ctx.drawImage(\n      this.earth,\n      this.canvas.width / 2 - 38,\n      this.canvas.height / 2 - 38,\n      75,\n      75\n    );\n  }\n\n  updateEarth() {\n    for (var i = 0; i < this.meteorArray.length; i++) {\n      var meteor = this.meteorArray[i];\n      var meteorPoint = meteor.startPoint;\n      var dx = this.canvas.width / 2 - meteorPoint.x;\n      var dy = this.canvas.height / 2 - meteorPoint.y;\n      var dist = Math.sqrt(dx * dx + dy * dy);\n      if (dist <= 29) {\n        if (this.health > 0) {\n          this.health -= 1;\n        }\n\n        this.createCluseterExplosion(\n          meteorPoint.x,\n          meteorPoint.y,\n          Math.random() * 250,\n          Math.random() * 25 + 50,\n          40\n        );\n        this.createLineExplosion(\n          meteorPoint.x,\n          meteorPoint.y,\n          meteor.angle,\n          0,\n          50,\n          meteor.length,\n          20\n        );\n\n        this.createFlares(meteorPoint.x, meteorPoint.y, 0);\n\n        this.meteorArray.splice(i, 1);\n      }\n    }\n  }\n\n  renderScore() {\n    var score = this.score.toString();\n    var fullScore = \"Score: \" + score;\n    this.ctx.font = \"20px Georgia\";\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillText(fullScore, this.canvas.width - 200, 50);\n  }\n\n  renderLives() {\n    var lives = this.health.toString();\n    var fullLives = lives;\n    this.ctx.font = \"25px Georgia\";\n    this.ctx.fillStyle = \"white\";\n    this.ctx.shadowColor = \"rgba(0,0,0,1)\";\n    this.ctx.shadowBlur = 4;\n    this.ctx.fillText(\n      fullLives,\n      this.canvas.width / 2 - 7,\n      this.canvas.height / 2 + 5\n    );\n  }\n\n  renderPower() {\n    this.ctx.fillStyle = \"grey\";\n    this.ctx.fillRect(\n      this.canvas.width - 50,\n      this.canvas.height - 250,\n      20,\n      -100\n    );\n\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillRect(\n      this.canvas.width - 50,\n      this.canvas.height - 250,\n      20,\n      -this.power.current\n    );\n  }\n\n  loop() {\n    this.clear();\n    this.updateStars();\n    this.renderStars();\n    this.renderScore();\n    this.renderPower();\n    this.updateEarth();\n    this.renderEarth();\n    this.renderLives();\n    this.updateMeteors();\n    this.updateShields();\n    this.renderShields();\n    this.updatePower();\n    this.renderGuide();\n    this.updateExplosions();\n    this.renderExplosions();\n    this.updateFlares();\n    this.renderFlares();\n    this.checkGameOver();\n  }\n\n  checkGameOver() {\n    if (this.health <= 0) {\n      this.gameOver = true;\n      this.fade += 0.01;\n      this.ctx.fillStyle = \"rgba(0,0,0,\" + this.fade + \")\";\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n      setTimeout(() => this.handleGameOver(), 5000);\n    }\n  }\n\n  handleGameOver() {\n    clearInterval(this.gameLoop);\n    clearInterval(this.meteorInterval);\n    clearInterval(this.difficultyInterval);\n  }\n\n  handleSpace() {\n    // debugger;\n    this.gamePause = this.gamePause ? false : true;\n    if (this.gamePause) {\n      clearInterval(this.gameLoop);\n      clearInterval(this.meteorInterval);\n      clearInterval(this.difficultyInterval);\n    } else {\n      this.difficultyInterval = setInterval(this.increaseDifficulty, 3000);\n      this.meteorInterval = setInterval(this.createMeteors, 700);\n      this.gameLoop = setInterval(this.loop, 16);\n    }\n  }\n\n  handleMousedown() {\n    this.mousedown = true;\n    this.tempStartPoint = { x: this.mouseX, y: this.mouseY };\n  }\n\n  handleMouseup() {\n    this.mousedown = false;\n    if (this.shieldArray.length < 50) {\n      if (\n        this.tempStartPoint.x != this.tempEndPoint.x ||\n        this.tempStartPoint.y != this.tempEndPoint.y\n      ) {\n        this.shieldArray.push(\n          new Shield(this.tempStartPoint, this.tempEndPoint, this.ctx)\n        );\n        this.power.current -= this.tempLineLength;\n      }\n    }\n  }\n\n  handleMousemove(e) {\n    this.mouseX = e.x - this.canvas.offsetLeft;\n    this.mouseY = e.y - this.canvas.offsetTop;\n  }\n}\n\nexport default Game;\n","class Meteor {\n  constructor(canvas, ctx, speed) {\n    this.ctx = ctx;\n    this.canvas = canvas;\n    this.side = Math.floor(Math.random() * 4);\n    this.startPoint;\n    this.speed = Math.random() * 2 + speed;\n\n    switch (this.side) {\n      case 0:\n        this.startPoint = {\n          y: 0,\n          x: Math.random() * this.canvas.width\n        };\n        break;\n      case 1:\n        this.startPoint = {\n          y: Math.random() * this.canvas.height,\n          x: this.canvas.width\n        };\n        break;\n      case 2:\n        this.startPoint = {\n          y: this.canvas.height,\n          x: Math.random() * this.canvas.width\n        };\n        break;\n      case 3:\n        this.startPoint = {\n          y: Math.random() * this.canvas.height,\n          x: 0\n        };\n        break;\n    }\n\n    var dx = this.canvas.width / 2 - this.startPoint.x;\n    var dy = this.canvas.height / 2 - this.startPoint.y;\n    this.angle = Math.atan2(dy, dx);\n    this.length = 80;\n\n    this.endPoint = {\n      y: this.startPoint.y - Math.sin(this.angle) * this.length,\n      x: this.startPoint.x - Math.cos(this.angle) * this.length\n    };\n  }\n\n  update() {\n    this.startPoint.x += Math.cos(this.angle) * this.speed;\n    this.endPoint.x += Math.cos(this.angle) * this.speed;\n    this.startPoint.y += Math.sin(this.angle) * this.speed;\n    this.endPoint.y += Math.sin(this.angle) * this.speed;\n  }\n\n  render() {\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.startPoint.x, this.startPoint.y);\n    this.ctx.lineTo(this.endPoint.x, this.endPoint.y);\n    this.ctx.lineWidth = 1.5;\n    this.ctx.strokeStyle = \"red\";\n    this.ctx.stroke();\n  }\n}\n\nexport default Meteor;\n","class Shield {\n  constructor(startPoint, endPoint, ctx) {\n    this.startPoint = startPoint;\n    this.endPoint = endPoint;\n    this.ctx = ctx;\n\n    var dx = startPoint.x - endPoint.x;\n    var dy = startPoint.y - endPoint.y;\n    this.length = Math.sqrt(dx * dx + dy * dy);\n    this.angle = Math.atan2(dy, dx);\n  }\n\n  render() {\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.startPoint.x, this.startPoint.y);\n    this.ctx.lineTo(this.endPoint.x, this.endPoint.y);\n    this.ctx.strokeStyle = \"white\";\n    this.ctx.stroke();\n  }\n}\n\nexport default Shield;\n","class Star {\n  constructor(x, y, radius, speed, ctx) {\n    this.ctx = ctx;\n    this.x = x;\n    this.y = y;\n    this.speed = speed;\n    this.radius = radius;\n    this.saturation = 30 * 5;\n    this.lightness = 8 * 3;\n  }\n\n  render() {\n    this.ctx.beginPath();\n    this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    this.ctx.shadowColor = \"transparent\";\n    this.ctx.fillStyle =\n      \"hsla(60, \" +\n      this.saturation +\n      \"%, \" +\n      this.lightness +\n      \"%, \" +\n      0.2 +\n      \")\";\n    this.ctx.fill();\n  }\n\n  update() {\n    this.y += this.speed;\n  }\n}\nexport default Star;\n"],"sourceRoot":""}